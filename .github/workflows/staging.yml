name: Create Staging Environment on Render

on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull request number'
        required: true

jobs:
  Create:
    name: 'Create Staging and Deploy'
    runs-on: ubuntu-latest

    env:
      RENDER_CLIENT_SERVICE_ID: ${{ secrets.RENDER_CLIENT_SERVICE_ID }}
      RENDER_SERVER_SERVICE_ID: ${{ secrets.RENDER_SERVER_SERVICE_ID }}
      RENDER_API_TOKEN: ${{ secrets.RENDER_API_TOKEN }}

    steps:
      # Verify that the pull request number is valid and open
      - name: Verify Pull Request Number
        uses: actions/github-script@v5
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.PR_number }}
            });
            if (response.data.state !== 'open') {
              throw new Error('Pull request is not open or number is not valid!');
            }
            return response.data.head.ref;

      # Debug Branch Name
      - name: Debug Branch Name
        run: |
          echo "Branch Name: ${{ steps.verify_pr_number.outputs.result }}"

      # Clean Branch Name
      - name: Clean Branch Name
        id: clean_branch_name
        run: |
          echo "BRANCH_NAME=${{ steps.verify_pr_number.outputs.result }}" >> $GITHUB_ENV

      # Checkout the PR branch
      - name: 'Checkout PR Branch'
        uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}
          fetch-depth: 0

      # Set up Node.js environment
      - name: 'Set up Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      # Install dependencies for both frontend and backend
      - name: 'Install Dependencies'
        run: |
          cd ./client
          npm install
          cd ../server
          npm install

      # Build the frontend project
      - name: 'Build Frontend'
        run: |
          cd ./client
          npm run build

      # Deploy frontend to Render
      - name: 'Deploy Frontend to Render'
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ env.RENDER_CLIENT_SERVICE_ID }}
          api-key: ${{ env.RENDER_API_TOKEN }}

      # Deploy backend to Render
      - name: 'Deploy Backend to Render'
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ env.RENDER_SERVER_SERVICE_ID }}
          api-key: ${{ env.RENDER_API_TOKEN }}

      # SSH Debugging with tmate in case of failure
      - name: 'Setup tmate session'
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
